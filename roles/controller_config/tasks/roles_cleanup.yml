- name: ROLES - Cleanup (pre 2.5)
  when: controller_ping.version is version_compare('4.6', '<')
  block:
    - name: ROLES - Get team roles (pre 2.5)
      ansible.builtin.set_fact:
        controller_objects_existing_team_roles: "{{ controller_objects_existing_team_roles | default([]) +
                                                    [{'team': item.name,
                                                      'roles': lookup('ansible.controller.controller_api',
                                                                      'teams/' +
                                                                         item.id | string +
                                                                         '/roles/',
                                                                      return_objects=false,
                                                                      return_all=true).results}] }}"
      loop: "{{ lookup('ansible.controller.controller_api', 'teams/', return_objects=false, return_all=true).results }}"
      loop_control:
        label: " | team: {{ item.name }}"

    - name: ROLES - Build list with team roles (pre 2.5)
      ansible.builtin.set_fact:
        controller_objects_existing_roles: "{{ controller_objects_existing_roles | default([]) +
                                               [{'team': item.0.team,
                                                 'role': item.1.summary_fields.resource_type_display_name | replace(' ', '') + ' ' + item.1.name,
                                                 'object_type': object_type,
                                                 'object_name': item.1.summary_fields.resource_name}] }}"
      loop: "{{ controller_objects_existing_team_roles | default([]) | subelements('roles') }}"
      loop_control:
        label: " | team: {{ item.0.team }} ->
                   role: {{ item.1.name }} ->
                   {{ object_type }}: {{ item.1.summary_fields.resource_name }}"
      vars:
        object_type: "{{ item.1.summary_fields.resource_type | replace('_', '') }}"

    - name: ROLES - Get user roles (pre 2.5)
      ansible.builtin.set_fact:
        controller_objects_existing_user_roles: "{{ controller_objects_existing_user_roles | default([]) +
                                                    [{'user': item.username,
                                                      'roles': lookup('ansible.controller.controller_api',
                                                                      'users/' +
                                                                         item.id | string +
                                                                         '/roles/',
                                                                      return_objects=false,
                                                                      return_all=true).results}] }}"
      when: not item.is_superuser
      loop: "{{ lookup('ansible.controller.controller_api', 'users/', return_objects=false, return_all=true).results }}"
      loop_control:
        label: " | user: {{ item.username }}"

    - name: ROLES - Build list with user roles (pre 2.5)
      ansible.builtin.set_fact:
        controller_objects_existing_roles: "{{ controller_objects_existing_roles | default([]) +
                                               [{'user': item.0.user,
                                                 'role': item.1.summary_fields.resource_type_display_name | replace(' ', '') + ' ' + item.1.name,
                                                 'object_type': object_type,
                                                 'object_name': item.1.summary_fields.resource_name}] }}"
      when: item.1.summary_fields.resource_type is defined
      loop: "{{ controller_objects_existing_user_roles | default([]) | subelements('roles') }}"
      loop_control:
        label: " | user: {{ item.0.user }} ->
                   role: {{ item.1.name }} ->
                   {{ object_type }}: {{ item.1.summary_fields.resource_name | default('N/A') }}"
      vars:
        object_type: "{{ item.1.summary_fields.resource_type | default('N/A') | replace('_', '') }}"

    - name: ROLES - Notify on rogue roles (pre 2.5)
      ansible.builtin.debug:
        msg: "Shouldn't be there"
      when: >
            not delete_objects | default(false) | bool and
            controller_objects_roles |
              selectattr("team", "defined") |
              selectattr("team", "equalto", item.team | default('')) |
              selectattr("role", "equalto", item.role) |
              selectattr("object_name", "equalto", item.object_name) | length == 0 and
            controller_objects_roles |
              selectattr("user", "defined") |
              selectattr("user", "equalto", item.user | default('')) |
              selectattr("role", "equalto", item.role) |
              selectattr("object_name", "equalto", item.object_name) | length == 0
      changed_when: true
      loop: "{{ controller_objects_existing_roles | default([]) }}"
      loop_control:
        label: " | team/user: {{ item.team | default(item.user) }} ->
                   role: {{ item.role.split(' ')[1:] | join(' ') }} ->
                   {{ item.object_type }}: {{ item.object_name }}"

    - name: ROLES - Delete rogue roles (pre 2.5)
      ansible.controller.role:
        team: "{{ item.team | default(omit) }}"
        user: "{{ item.user | default(omit) }}"
        role: "{{ item.role.split(' ')[1:] | join('_') | lower | replace('approve', 'approval') | replace('ad_hoc', 'adhoc') }}"
        instance_groups: "{{ omit if item.object_type != 'instancegroup' else item.object_name }}"
        organizations: "{{ omit if item.object_type != 'organization' else item.object_name }}"
        credentials: "{{ omit if item.object_type != 'credential' else item.object_name }}"
        job_templates: "{{ omit if item.object_type != 'jobtemplate' else item.object_name }}"
        projects: "{{ omit if item.object_type != 'project' else item.object_name }}"
        workflows: "{{ omit if item.object_type != 'workflowjobtemplate' else item.object_name }}"
        inventories: "{{ omit if item.object_type != 'inventory' else item.object_name }}"
        state: absent
      when: >
            delete_objects | default(false) | bool and
            controller_objects_roles |
              selectattr("team", "defined") |
              selectattr("team", "equalto", item.team | default('')) |
              selectattr("role", "equalto", item.role) |
              selectattr("object_name", "equalto", item.object_name) | length == 0 and
            controller_objects_roles |
              selectattr("user", "defined") |
              selectattr("user", "equalto", item.user | default('')) |
              selectattr("role", "equalto", item.role) |
              selectattr("object_name", "equalto", item.object_name) | length == 0
      changed_when: true
      loop: "{{ controller_objects_existing_roles | default([]) }}"
      loop_control:
        label: " | team/user: {{ item.team | default(item.user) }} ->
                   role: {{ item.role.split(' ')[1:] | join(' ') }} ->
                   {{ item.object_type }}: {{ item.object_name }}"

- name: ROLES - Cleanup (2.5)
  when: controller_ping.version is version_compare('4.6', '>=')
  block:
    - name: ROLES - Build list with gateway user roles (2.5)
      ansible.builtin.set_fact:
        gateway_objects_roles_users: "{{ lookup('ansible.platform.gateway_api', 'role_user_assignments',
                                                return_objects=false,
                                                host=lookup('ansible.builtin.env', 'GATEWAY_HOSTNAME'),
                                                username=lookup('ansible.builtin.env', 'GATEWAY_USERNAME'),
                                                password=lookup('ansible.builtin.env', 'GATEWAY_PASSWORD'),
                                                oauth_token=lookup('ansible.builtin.env', 'GATEWAY_API_TOKEN'),
                                                verify_ssl=lookup('ansible.builtin.env', 'GATEWAY_VERIFY_SSL')).results }}"

    - name: ROLES - Notify on rogue gateway user roles (2.5)
      ansible.builtin.debug:
        msg: "Shouldn't be there"
      when: >
            not delete_objects | default(false) | bool and
            gateway_objects_roles |
              selectattr("user", "defined") |
                selectattr("user", "equalto", item.summary_fields.user.username) |
                  selectattr("role", "equalto", item.summary_fields.role_definition.name) |
                    selectattr("object_name", "equalto", item.summary_fields.content_object.name | default('Platform')) | length == 0
      changed_when: true
      loop: "{{ gateway_objects_roles_users | default([]) }}"
      loop_control:
        label: " | user: {{ item.summary_fields.user.username }} ->
                   role: {{ item.summary_fields.role_definition.name }} ->
                   {{ (item.content_type | string).split('.')[1] | default('platform') }}:
                   {{ item.summary_fields.content_object.name | default('Platform') }}"

    - name: ROLES - Delete rogue gateway user roles (2.5)
      ansible.platform.role_user_assignment:
        role_definition: "{{ item.summary_fields.role_definition.name }}"
        object_id: "{{ omit if item.summary_fields.content_object is not defined else item.summary_fields.content_object.id }}"
        user: "{{ item.summary_fields.user.username }}"
        state: absent
      when: >
            delete_objects | default(false) | bool and
            gateway_objects_roles |
              selectattr("user", "defined") |
                selectattr("user", "equalto", item.summary_fields.user.username) |
                  selectattr("role", "equalto", item.summary_fields.role_definition.name) |
                    selectattr("object_name", "equalto", item.summary_fields.content_object.name | default('Platform')) | length == 0
      loop: "{{ gateway_objects_roles_users | default([]) }}"
      loop_control:
        label: " | user: {{ item.summary_fields.user.username }} ->
                   role: {{ item.summary_fields.role_definition.name }} ->
                   {{ (item.content_type | string).split('.')[1] | default('platform') }}:
                   {{ item.summary_fields.content_object.name | default('Platform') }}"

    - name: ROLES - Build list with controller team roles (2.5)
      ansible.builtin.set_fact:
        controller_objects_roles_teams: "{{ lookup('ansible.controller.controller_api', 'role_team_assignments', return_objects=false).results }}"

    - name: ROLES - Notify on rogue controller team roles (2.5)
      ansible.builtin.debug:
        msg: "Shouldn't be there"
      when: >
            not delete_objects | default(false) | bool and
            controller_objects_roles |
              selectattr("team", "defined") |
                selectattr("team", "equalto", item.summary_fields.team.name) |
                  selectattr("role", "equalto", item.summary_fields.role_definition.name) |
                    selectattr("object_name", "equalto", item.summary_fields.content_object.name) | length == 0
      changed_when: true
      loop: "{{ controller_objects_roles_teams | default([]) }}"
      loop_control:
        label: " | team: {{ item.summary_fields.team.name }} ->
                   role: {{ item.summary_fields.role_definition.name }} ->
                   {{ item.content_type.split('.')[1] }}:
                   {{ item.summary_fields.content_object.name }}"

    - name: ROLES - Delete rogue controller team roles (2.5)
      ansible.controller.role_team_assignment:
        role_definition: "{{ item.summary_fields.role_definition.name }}"
        object_id: "{{ item.summary_fields.content_object.id }}"
        team: "{{ item.summary_fields.team.name }}"
        state: absent
      when: >
            delete_objects | default(false) | bool and
            controller_objects_roles |
              selectattr("team", "defined") |
                selectattr("team", "equalto", item.summary_fields.team.name) |
                  selectattr("role", "equalto", item.summary_fields.role_definition.name) |
                    selectattr("object_name", "equalto", item.summary_fields.content_object.name) | length == 0
      loop: "{{ controller_objects_roles_teams | default([]) }}"
      loop_control:
        label: " | team: {{ item.summary_fields.team.name }} ->
                   role: {{ item.summary_fields.role_definition.name }} ->
                   {{ item.content_type.split('.')[1] }}:
                   {{ item.summary_fields.content_object.name }}"

    - name: ROLES - Build list with controller user roles (2.5)
      ansible.builtin.set_fact:
        controller_objects_roles_users: "{{ lookup('ansible.controller.controller_api', 'role_user_assignments', return_objects=false).results }}"

    - name: ROLES - Notify on rogue controller user roles (2.5)
      ansible.builtin.debug:
        msg: "Shouldn't be there"
      when: >
            not delete_objects | default(false) | bool and
            item.content_type and
            controller_objects_roles |
              selectattr("user", "defined") |
                selectattr("user", "equalto", item.summary_fields.user.username) |
                  selectattr("role", "equalto", item.summary_fields.role_definition.name) |
                    selectattr("object_name", "equalto", item.summary_fields.content_object.name) | length == 0
      changed_when: true
      loop: "{{ controller_objects_roles_users | default([]) }}"
      loop_control:
        label: " | user: {{ item.summary_fields.user.username }} ->
                   role: {{ item.summary_fields.role_definition.name }} ->
                   {{ (item.content_type | string).split('.')[1] | default('controller') }}:
                   {{ item.summary_fields.content_object.name | default('Controller') }}"

    - name: ROLES - Delete rogue controller user roles (2.5)
      ansible.controller.role_user_assignment:
        role_definition: "{{ item.summary_fields.role_definition.name }}"
        object_id: "{{ item.summary_fields.content_object.id }}"
        user: "{{ item.summary_fields.user.username }}"
        state: absent
      when: >
            delete_objects | default(false) | bool and
            item.content_type and
            controller_objects_roles |
              selectattr("user", "defined") |
                selectattr("user", "equalto", item.summary_fields.user.username) |
                  selectattr("role", "equalto", item.summary_fields.role_definition.name) |
                    selectattr("object_name", "equalto", item.summary_fields.content_object.name) | length == 0
      loop: "{{ controller_objects_roles_users | default([]) }}"
      loop_control:
        label: " | user: {{ item.summary_fields.user.username }} ->
                   role: {{ item.summary_fields.role_definition.name }} ->
                   {{ (item.content_type | string).split('.')[1] | default('controller') }}:
                   {{ item.summary_fields.content_object.name | default('Controller') }}"
