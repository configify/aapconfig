- name: ROLES - Create user gateway roles (2.5)
  ansible.platform.role_user_assignment:
    role_definition: "{{ item.role }}"
    object_id: "{{ lookup('ansible.controller.controller_api',
                          controller_config_type_to_api_mapping[item.object_type],
                          return_objects=false,
                          return_all=true).results |
                   selectattr('name', 'equalto', item.object_name) |
                   map(attribute='id') | last | default('0') | int }}"
    user: "{{ item.user }}"
  loop: "{{ gateway_objects_roles }}"
  loop_control:
    label: " | user: {{ item.user | default('N/A') }} -> role: {{ item.role }} -> {{ item.object_type }}: {{ item.object_name }}"
  when: >
        gateway_objects_roles is defined and
        item.user is defined
  register: gateway_user_roles_change
  failed_when: >
               (not ansible_check_mode and
                gateway_user_roles_change.msg is defined) or
               (ansible_check_mode and
                gateway_user_roles_change.msg is defined and
                'object does not exist' not in gateway_user_roles_change.msg and
                'Provide exactly one of user or user_ansible_id' not in gateway_user_roles_change.msg)
  changed_when: >
                gateway_user_roles_change.changed or
                (ansible_check_mode and
                 gateway_user_roles_change.msg is defined and
                 ('object does not exist' in gateway_user_roles_change.msg or
                  'Provide exactly one of user or user_ansible_id' in gateway_user_roles_change.msg))

# - name: ROLES - Create team gateway roles (2.5)
#   ansible.platform.role_team_assignment: # This doesn't exist yet but API endpoint is there
#     role_definition: "{{ item.role }}"
#     object_id: "{{ lookup('ansible.controller.controller_api',
#                           controller_config_type_to_api_mapping[item.object_type],
#                           return_objects=false,
#                           return_all=true).results |
#                    selectattr('name', 'equalto', item.object_name) |
#                    map(attribute='id') | last | default('0') | int }}"
#     team: "{{ item.team }}"
#   loop: "{{ gateway_objects_roles }}"
#   loop_control:
#     label: " | team: {{ item.team | default('N/A') }} -> role: {{ item.role }} -> {{ item.object_type }}: {{ item.object_name }}"
#   when: >
#         gateway_objects_roles is defined and
#         item.team is defined
#   register: gateway_team_roles_change
#   failed_when: >
#                (not ansible_check_mode and
#                 gateway_team_roles_change.msg is defined) or
#                (ansible_check_mode and
#                 gateway_team_roles_change.msg is defined and
#                 'object does not exist' not in gateway_team_roles_change.msg and
#                 'Provide exactly one of user or user_ansible_id' not in gateway_team_roles_change.msg)
#   changed_when: >
#                 gateway_team_roles_change.changed or
#                 (ansible_check_mode and
#                  gateway_team_roles_change.msg is defined and
#                  ('object does not exist' in gateway_team_roles_change.msg or
#                   'Provide exactly one of user or user_ansible_id' in gateway_team_roles_change.msg))

- name: ROLES - Create user controller roles (2.5)
  ansible.controller.role_user_assignment:
    role_definition: "{{ item.role }}"
    object_id: "{{ lookup('ansible.controller.controller_api',
                          controller_config_type_to_api_mapping[item.object_type],
                          return_objects=false,
                          return_all=true).results |
                   selectattr('name', 'equalto', item.object_name) |
                   map(attribute='id') | last | default('0') | int }}"
    user: "{{ item.user }}"
  loop: "{{ controller_objects_roles }}"
  loop_control:
    label: " | user: {{ item.user | default('N/A') }} -> role: {{ item.role }} -> {{ item.object_type }}: {{ item.object_name }}"
  when: >
        controller_objects_roles is defined and
        item.user is defined
  register: controller_user_roles_change
  failed_when: >
               (not ansible_check_mode and
                controller_user_roles_change.msg is defined) or
               (ansible_check_mode and
                controller_user_roles_change.msg is defined and
                'returned 0 items' not in controller_user_roles_change.msg)
  changed_when: >
                controller_user_roles_change.changed or
                (ansible_check_mode and
                 controller_user_roles_change.msg is defined and
                 'returned 0 items' in controller_user_roles_change.msg)

- name: ROLES - Create team controller roles (2.5)
  ansible.controller.role_team_assignment:
    role_definition: "{{ item.role }}"
    object_id: "{{ lookup('ansible.controller.controller_api',
                          controller_config_type_to_api_mapping[item.object_type],
                          return_objects=false,
                          return_all=true).results |
                   selectattr('name', 'equalto', item.object_name) |
                   map(attribute='id') | last | default('0') | int }}"
    team: "{{ item.team }}"
  loop: "{{ controller_objects_roles }}"
  loop_control:
    label: " | team: {{ item.team | default('N/A') }} -> role: {{ item.role }} -> {{ item.object_type }}: {{ item.object_name }}"
  when: >
        controller_objects_roles is defined and
        item.team is defined
  register: controller_team_roles_change
  failed_when: >
               (not ansible_check_mode and
                controller_team_roles_change.msg is defined) or
               (ansible_check_mode and
                controller_team_roles_change.msg is defined and
                'returned 0 items' not in controller_team_roles_change.msg)
  changed_when: >
                controller_team_roles_change.changed or
                (ansible_check_mode and
                 controller_team_roles_change.msg is defined and
                 'returned 0 items' in controller_team_roles_change.msg)
