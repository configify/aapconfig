- name: ROLES - Add/modify roles (pre 2.5)
  when: controller_ping.version is version_compare('4.6', '<')
  block:
    - name: ROLES - Add/modify organization roles (pre 2.5)
      ansible.controller.role:
        team: "{{ item.team | default(omit) }}"
        user: "{{ item.user | default(omit) }}"
        role: "{{ role }}"
        organizations: "{{ item.object_name }}"
      loop: "{{ controller_objects_roles | default([]) }}"
      loop_control:
        label: " | team/user: {{ item.team | default(item.user) }} ->
                   role: {{ role }} ->
                   {{ item.object_type }}: {{ item.object_name }}"
      vars:
        role: "{{ item.role.split(' ')[1:] | join('_') | lower | replace('approve', 'approval') | replace('ad_hoc', 'adhoc') }}"
      when: item.object_type == 'organization'
      register: roles_change
      failed_when: >
                   (not ansible_check_mode and
                    roles_change.msg is defined) or
                   (ansible_check_mode and
                    roles_change.msg is defined and
                    'missing items' not in roles_change.msg and
                    'returned 0 items' not in roles_change.msg)
      changed_when: >
                    roles_change.changed or
                    (ansible_check_mode and
                     roles_change.msg is defined and
                     ('returned 0 items' in roles_change.msg or
                      'missing items' in roles_change.msg))

    - name: ROLES - Add/modify the rest of the roles (pre 2.5)
      ansible.controller.role:
        team: "{{ item.team | default(omit) }}"
        user: "{{ item.user | default(omit) }}"
        role: "{{ role }}"
        instance_groups: "{{ omit if item.object_type != 'instancegroup' else item.object_name }}"
        credentials: "{{ omit if item.object_type != 'credential' else item.object_name }}"
        job_templates: "{{ omit if item.object_type != 'jobtemplate' else item.object_name }}"
        projects: "{{ omit if item.object_type != 'project' else item.object_name }}"
        workflows: "{{ omit if item.object_type != 'workflowjobtemplate' else item.object_name }}"
        inventories: "{{ omit if item.object_type != 'inventory' else item.object_name }}"
      loop: "{{ controller_objects_roles | default([]) }}"
      loop_control:
        label: " | team/user: {{ item.team | default(item.user) }} ->
                   role: {{ role }} ->
                   {{ item.object_type }}: {{ item.object_name }}"
      vars:
        role: "{{ item.role.split(' ')[1:] | join('_') | lower | replace('approve', 'approval') | replace('ad_hoc', 'adhoc') }}"
      when: item.object_type != 'organization'
      register: roles_change
      failed_when: >
                   (not ansible_check_mode and
                    roles_change.msg is defined) or
                   (ansible_check_mode and
                    roles_change.msg is defined and
                    'missing items' not in roles_change.msg and
                    'returned 0 items' not in roles_change.msg)
      changed_when: >
                    roles_change.changed or
                    (ansible_check_mode and
                     roles_change.msg is defined and
                     ('returned 0 items' in roles_change.msg or
                      'missing items' in roles_change.msg))

- name: ROLES - Add/modify roles (2.5)
  when: controller_ping.version is version_compare('4.6', '>=')
  block:
    - name: ROLES - Create user gateway roles (2.5)
      ansible.platform.role_user_assignment:
        role_definition: "{{ item.role }}"
        object_id: "{{ omit if item.object_name == 'Platform' else
                       lookup('ansible.controller.controller_api',
                              controller_config_type_to_api_mapping[item.object_type],
                              return_objects=false,
                              return_all=true).results |
                       selectattr('name', 'equalto', item.object_name) |
                       map(attribute='id') | last | default('0') | int }}"
        user: "{{ item.user }}"
      loop: "{{ gateway_objects_roles }}"
      loop_control:
        label: " | user: {{ item.user | default('N/A') }} ->
                   role: {{ item.role }} ->
                   {{ item.object_type }}: {{ item.object_name }}"
      when: >
            gateway_objects_roles is defined and
            item.user is defined
      register: gateway_user_roles_change
      failed_when: >
                   (not ansible_check_mode and
                    gateway_user_roles_change.msg is defined) or
                   (ansible_check_mode and
                    gateway_user_roles_change.msg is defined and
                    'object does not exist' not in gateway_user_roles_change.msg and
                    'Provide exactly one of user or user_ansible_id' not in gateway_user_roles_change.msg)
      changed_when: >
                    gateway_user_roles_change.changed or
                    (ansible_check_mode and
                     gateway_user_roles_change.msg is defined and
                     ('object does not exist' in gateway_user_roles_change.msg or
                      'Provide exactly one of user or user_ansible_id' in gateway_user_roles_change.msg))

    - name: ROLES - Create controller user roles (2.5)
      ansible.controller.role_user_assignment:
        role_definition: "{{ item.role }}"
        object_id: "{{ lookup('ansible.controller.controller_api',
                              controller_config_type_to_api_mapping[item.object_type],
                              return_objects=false,
                              return_all=true).results |
                       selectattr('name', 'equalto', item.object_name) |
                       map(attribute='id') | last | default('0') | int }}"
        user: "{{ item.user }}"
      loop: "{{ controller_objects_roles }}"
      loop_control:
        label: " | team/user: {{ item.team | default(item.user) }} ->
                   role: {{ item.role }} ->
                   {{ item.object_type }}: {{ item.object_name }}"
      when: >
            item.user is defined and
            controller_objects_roles is defined and
            item.role != 'Organization Member' and
            item.role != 'Organization Admin'
      register: controller_roles_change
      failed_when: >
                   (not ansible_check_mode and
                    controller_roles_change.msg is defined) or
                   (ansible_check_mode and
                    controller_roles_change.msg is defined and
                    'returned 0 items' not in controller_roles_change.msg)
      changed_when: >
                    controller_roles_change.changed or
                    (ansible_check_mode and
                     controller_roles_change.msg is defined and
                     'returned 0 items' in controller_roles_change.msg)

    - name: ROLES - Create controller team roles (2.5)
      ansible.controller.role_team_assignment:
        role_definition: "{{ item.role }}"
        object_id: "{{ lookup('ansible.controller.controller_api',
                              controller_config_type_to_api_mapping[item.object_type],
                              return_objects=false,
                              return_all=true).results |
                       selectattr('name', 'equalto', item.object_name) |
                       map(attribute='id') | last | default('0') | int }}"
        team: "{{ item.team | default(omit) }}"
      loop: "{{ controller_objects_roles }}"
      loop_control:
        label: " | team/user: {{ item.team | default(item.user) }} ->
                   role: {{ item.role }} ->
                   {{ item.object_type }}: {{ item.object_name }}"
      when: >
            item.team is defined and
            controller_objects_roles is defined and
            item.role != 'Organization Member'
      register: controller_roles_change
      failed_when: >
                   (not ansible_check_mode and
                    controller_roles_change.msg is defined) or
                   (ansible_check_mode and
                    controller_roles_change.msg is defined and
                    'returned 0 items' not in controller_roles_change.msg)
      changed_when: >
                    controller_roles_change.changed or
                    (ansible_check_mode and
                     controller_roles_change.msg is defined and
                     'returned 0 items' in controller_roles_change.msg)
